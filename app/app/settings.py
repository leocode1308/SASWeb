"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print("BASE_DIR", BASE_DIR)

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", cast = str, default="smtp.gmail.com")
EMAIL_PORT= config("EMAIL_PORT", cast = str, default="587")
 
EMAIL_HOST_USER = config("EMAIL_HOST_USER", cast = str, default = None)
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", cast = str, default = None) 

EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool, default=False)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool, default=False)

ADMIN_USER_NAME = config("ADMIN_USER_NAME", default = "No Admin")
ADMIN_USER_EMAIL = config("ADMIN_USER_EMAIL", default = None)

ADMINS = []
MANAGERS = []

if all([ADMIN_USER_NAME, ADMIN_USER_EMAIL]):
    ADMINS += [
        (f'{ADMIN_USER_NAME}', f'{ADMIN_USER_EMAIL}')
    ]

MANAGERS = ADMINS


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='algun-valor-secreto-temporal-para-build')            

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = str(os.environ.get('DJANGO_DEBUG')).lower() == "true"
DEBUG = config('DJANGO_DEBUG', default=False, cast=bool)
print("DEBUG", DEBUG, type(DEBUG))

SITE_ID = 1
BASE_URL = config("BASE_URL", default=None)
ALLOWED_HOSTS = [
    ".railway.app" #https://sasweb.prod.railway.app
]
if DEBUG:
    ALLOWED_HOSTS += [
        "127.0.0.1",
        "localhost"
    ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Necesario para django-allauth
    # Apps Propias
    'visits',
    'comando',
    'app',  # Asegúrate de que tu aplicación principal esté aquí
    'profiles',
    'subscriptions',
    'customers',
    # third party app
    "allauth_ui", 
    'allauth', # third party app
    'allauth.account', # third party app
    'allauth.socialaccount', # third party app
    "allauth.socialaccount.providers.github", # third party app
    "widget_tweaks", # third party app
    "slippers", # third party app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Allauth:
    "allauth.account.middleware.AccountMiddleware",
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'app/templates'],  # Asegúrate de que este directorio exista
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

CONN_MAX_AGE = config('CONN_MAX_AGE', cast=int, default=30)
DATABASE_URL = config('DATABASE_URL', default='sqlite:///db.sqlite3', cast=str)


if DATABASE_URL is not None:
    import dj_database_url

    DATABASES = {'default': dj_database_url.config(
                    default=DATABASE_URL,
                    conn_max_age = CONN_MAX_AGE, # 30,
                    conn_health_checks = True
                )
            }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = '/'  # Redirect to home after login
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = "mandatory"
ACCOUNT_EMAIL_REQUIRED = True
# Django Allauth:
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "VERIFIED_EMAIL": True  # Ensure that the email is verified
    }

}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_BASE_DIR = BASE_DIR/ 'staticfiles'
STATICFILES_BASE_DIR.mkdir(exist_ok=True, parents=True)  # Ensure the directory exists
STATICFILES_VENDOR_DIR = STATICFILES_BASE_DIR /'vendors'

# source for python manage.py collectstatic
STATICFILES_DIRS = [
    STATICFILES_BASE_DIR 
]

# Define STATIC_ROOT para collectstatic
# Este será el directorio donde Docker copiará todos tus archivos estáticos
STATIC_ROOT = BASE_DIR.parent / 'local-cdn' #os.path.join(BASE_DIR, 'staticfiles')

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

if not DEBUG:
    STATIC_ROOT = BASE_DIR / 'prod-cdn'
    

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

